import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of AddTodo */
export type AddTodoInput = {
  name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddTodo */
export type AddTodoPayload = {
  __typename?: 'AddTodoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
  todo: Todo;
};

/** Autogenerated input type of DelTodo */
export type DelTodoInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DelTodo */
export type DelTodoPayload = {
  __typename?: 'DelTodoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  todo: Todo;
};

export type Mutation = {
  __typename?: 'Mutation';
  addTodo?: Maybe<AddTodoPayload>;
  delTodo?: Maybe<DelTodoPayload>;
};


export type MutationAddTodoArgs = {
  input: AddTodoInput;
};


export type MutationDelTodoArgs = {
  input: DelTodoInput;
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID'];
};

export type Query = {
  __typename?: 'Query';
  todos: Array<Todo>;
};

export type Todo = Node & ValidateError & {
  __typename?: 'Todo';
  errors?: Maybe<Array<Maybe<ValidationError>>>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type ValidateError = {
  errors?: Maybe<Array<Maybe<ValidationError>>>;
};

export type ValidationError = {
  __typename?: 'ValidationError';
  error: Scalars['String'];
  field: Scalars['String'];
};

export type AddTodoMutationVariables = Exact<{
  name: Scalars['String'];
}>;


export type AddTodoMutation = (
  { __typename?: 'Mutation' }
  & { addTodo?: Maybe<(
    { __typename?: 'AddTodoPayload' }
    & Pick<AddTodoPayload, 'result'>
    & { todo: (
      { __typename?: 'Todo' }
      & Pick<Todo, 'id' | 'name'>
      & { errors?: Maybe<Array<Maybe<(
        { __typename?: 'ValidationError' }
        & Pick<ValidationError, 'field' | 'error'>
      )>>> }
    ) }
  )> }
);

export type DelTodoMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DelTodoMutation = (
  { __typename?: 'Mutation' }
  & { delTodo?: Maybe<(
    { __typename?: 'DelTodoPayload' }
    & { todo: (
      { __typename?: 'Todo' }
      & Pick<Todo, 'id'>
    ) }
  )> }
);

export type TodosQueryVariables = Exact<{ [key: string]: never; }>;


export type TodosQuery = (
  { __typename?: 'Query' }
  & { todos: Array<(
    { __typename?: 'Todo' }
    & Pick<Todo, 'id' | 'name'>
  )> }
);

export type TodosIncludeIdQueryVariables = Exact<{ [key: string]: never; }>;


export type TodosIncludeIdQuery = (
  { __typename?: 'Query' }
  & { todos: Array<(
    { __typename?: 'Todo' }
    & Pick<Todo, 'id' | 'name'>
  )> }
);


export const AddTodoDocument = gql`
    mutation addTodo($name: String!) {
  addTodo(input: {name: $name}) {
    todo {
      id
      name
      errors {
        field
        error
      }
    }
    result
  }
}
    `;
export type AddTodoMutationFn = Apollo.MutationFunction<AddTodoMutation, AddTodoMutationVariables>;

/**
 * __useAddTodoMutation__
 *
 * To run a mutation, you first call `useAddTodoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddTodoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addTodoMutation, { data, loading, error }] = useAddTodoMutation({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useAddTodoMutation(baseOptions?: Apollo.MutationHookOptions<AddTodoMutation, AddTodoMutationVariables>) {
        return Apollo.useMutation<AddTodoMutation, AddTodoMutationVariables>(AddTodoDocument, baseOptions);
      }
export type AddTodoMutationHookResult = ReturnType<typeof useAddTodoMutation>;
export type AddTodoMutationResult = Apollo.MutationResult<AddTodoMutation>;
export type AddTodoMutationOptions = Apollo.BaseMutationOptions<AddTodoMutation, AddTodoMutationVariables>;
export const DelTodoDocument = gql`
    mutation delTodo($id: ID!) {
  delTodo(input: {id: $id}) {
    todo {
      id
    }
  }
}
    `;
export type DelTodoMutationFn = Apollo.MutationFunction<DelTodoMutation, DelTodoMutationVariables>;

/**
 * __useDelTodoMutation__
 *
 * To run a mutation, you first call `useDelTodoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDelTodoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [delTodoMutation, { data, loading, error }] = useDelTodoMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDelTodoMutation(baseOptions?: Apollo.MutationHookOptions<DelTodoMutation, DelTodoMutationVariables>) {
        return Apollo.useMutation<DelTodoMutation, DelTodoMutationVariables>(DelTodoDocument, baseOptions);
      }
export type DelTodoMutationHookResult = ReturnType<typeof useDelTodoMutation>;
export type DelTodoMutationResult = Apollo.MutationResult<DelTodoMutation>;
export type DelTodoMutationOptions = Apollo.BaseMutationOptions<DelTodoMutation, DelTodoMutationVariables>;
export const TodosDocument = gql`
    query todos {
  todos {
    id
    name
  }
}
    `;

/**
 * __useTodosQuery__
 *
 * To run a query within a React component, call `useTodosQuery` and pass it any options that fit your needs.
 * When your component renders, `useTodosQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTodosQuery({
 *   variables: {
 *   },
 * });
 */
export function useTodosQuery(baseOptions?: Apollo.QueryHookOptions<TodosQuery, TodosQueryVariables>) {
        return Apollo.useQuery<TodosQuery, TodosQueryVariables>(TodosDocument, baseOptions);
      }
export function useTodosLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TodosQuery, TodosQueryVariables>) {
          return Apollo.useLazyQuery<TodosQuery, TodosQueryVariables>(TodosDocument, baseOptions);
        }
export type TodosQueryHookResult = ReturnType<typeof useTodosQuery>;
export type TodosLazyQueryHookResult = ReturnType<typeof useTodosLazyQuery>;
export type TodosQueryResult = Apollo.QueryResult<TodosQuery, TodosQueryVariables>;
export const TodosIncludeIdDocument = gql`
    query todosIncludeId {
  todos {
    id
    name
  }
}
    `;

/**
 * __useTodosIncludeIdQuery__
 *
 * To run a query within a React component, call `useTodosIncludeIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useTodosIncludeIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTodosIncludeIdQuery({
 *   variables: {
 *   },
 * });
 */
export function useTodosIncludeIdQuery(baseOptions?: Apollo.QueryHookOptions<TodosIncludeIdQuery, TodosIncludeIdQueryVariables>) {
        return Apollo.useQuery<TodosIncludeIdQuery, TodosIncludeIdQueryVariables>(TodosIncludeIdDocument, baseOptions);
      }
export function useTodosIncludeIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TodosIncludeIdQuery, TodosIncludeIdQueryVariables>) {
          return Apollo.useLazyQuery<TodosIncludeIdQuery, TodosIncludeIdQueryVariables>(TodosIncludeIdDocument, baseOptions);
        }
export type TodosIncludeIdQueryHookResult = ReturnType<typeof useTodosIncludeIdQuery>;
export type TodosIncludeIdLazyQueryHookResult = ReturnType<typeof useTodosIncludeIdLazyQuery>;
export type TodosIncludeIdQueryResult = Apollo.QueryResult<TodosIncludeIdQuery, TodosIncludeIdQueryVariables>;